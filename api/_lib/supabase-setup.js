// Script d'initialisation Supabase bas√© sur la documentation officielle
require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

// R√©cup√©rer les variables d'environnement Supabase
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY;

// V√©rifier que les variables d'environnement sont d√©finies
if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  console.error('SUPABASE_URL et SUPABASE_SERVICE_KEY doivent √™tre d√©finis');
  process.exit(1);
}

// Cr√©er le client Supabase avec la cl√© de service (admin)
const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// Nom du bucket pour les templates PowerPoint
const BUCKET_NAME = 'ppt-templates';

/**
 * Initialise les ressources Supabase n√©cessaires
 * @returns {Promise<boolean>} - true si l'initialisation a r√©ussi
 */
async function setupSupabase() {
  console.log('üîÑ Initialisation de Supabase...');

  try {
    // 1. V√©rifier si le bucket existe
    const { data: buckets, error: listError } = await supabaseAdmin.storage.listBuckets();

    if (listError) {
      console.error('‚ùå Erreur lors de la v√©rification des buckets:', listError);
      return false;
    }

    // V√©rifier si le bucket existe d√©j√†
    const bucketExists = buckets.some(bucket => bucket.name === BUCKET_NAME);

    if (!bucketExists) {
      console.log(`‚è≥ Cr√©ation du bucket "${BUCKET_NAME}"...`);

      // Cr√©er le bucket avec les options recommand√©es
      const { data, error: createError } = await supabaseAdmin.storage.createBucket(BUCKET_NAME, {
        public: true,  // Acc√®s public aux fichiers
        allowedMimeTypes: [
          'application/vnd.openxmlformats-officedocument.presentationml.presentation',
          'application/vnd.ms-powerpoint',
          'image/jpeg',
          'image/png'
        ],
        fileSizeLimit: 100 * 1024 * 1024 // 100MB
      });

      if (createError) {
        console.error(`‚ùå Erreur lors de la cr√©ation du bucket "${BUCKET_NAME}":`, createError);
        return false;
      }

      console.log(`‚úÖ Bucket "${BUCKET_NAME}" cr√©√© avec succ√®s`);
    } else {
      console.log(`‚úÖ Le bucket "${BUCKET_NAME}" existe d√©j√†`);
    }

    // 2. Configuration des politiques RLS
    console.log('üîÑ Configuration des politiques RLS...');

    // Activer RLS sur storage.objects
    const enableRLS = `ALTER TABLE storage.objects ENABLE ROW LEVEL SECURITY;`;

    // Politique de lecture publique
    const publicReadPolicy = `
      CREATE POLICY IF NOT EXISTS "Public read access to ppt-templates"
      ON storage.objects FOR SELECT
      TO public
      USING (bucket_id = '${BUCKET_NAME}');
    `;

    // Politique d'upload authentifi√©
    const authInsertPolicy = `
      CREATE POLICY IF NOT EXISTS "Authenticated upload to ppt-templates"
      ON storage.objects FOR INSERT
      TO authenticated
      WITH CHECK (bucket_id = '${BUCKET_NAME}');
    `;

    try {
      // Ex√©cuter les politiques une par une
      await supabaseAdmin.rpc('sql', { query: enableRLS });
      console.log('‚úÖ RLS activ√© sur storage.objects');

      await supabaseAdmin.rpc('sql', { query: publicReadPolicy });
      console.log('‚úÖ Politique de lecture publique cr√©√©e');

      await supabaseAdmin.rpc('sql', { query: authInsertPolicy });
      console.log('‚úÖ Politique d\'upload authentifi√© cr√©√©e');

    } catch (policyError) {
      console.warn('‚ö†Ô∏è Avertissement politiques RLS:', policyError.message);
      // Les politiques peuvent d√©j√† exister, continuons
    }

    console.log('‚úÖ Initialisation de Supabase termin√©e avec succ√®s');
    return true;
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation de Supabase:', error);
    return false;
  }
}

// Ex√©cuter l'initialisation si ce script est appel√© directement
if (require.main === module) {
  setupSupabase().then(success => {
    process.exit(success ? 0 : 1);
  });
}

module.exports = {
  supabaseAdmin,
  setupSupabase,
  BUCKET_NAME
};
