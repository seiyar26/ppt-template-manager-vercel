// Configuration des politiques RLS pour Supabase Storage
// Bas√© sur la documentation officielle : https://supabase.com/docs/guides/storage/security/access-control

const { supabaseAdmin, BUCKET_NAME } = require('./supabase-setup');

/**
 * Cr√©e les politiques RLS n√©cessaires pour le bucket de stockage
 * @returns {Promise<boolean>} - true si toutes les politiques ont √©t√© cr√©√©es avec succ√®s
 */
async function setupRLSPolicies() {
  console.log('üîÑ Configuration des politiques RLS pour le storage...');

  try {
    // Politique 1: Permettre √† tous de lire les fichiers du bucket public
    const selectPolicy = `
      create policy if not exists "Allow public read access to ppt-templates"
      on storage.objects for select
      to public
      using ( bucket_id = '${BUCKET_NAME}' );
    `;

    // Politique 2: Permettre l'upload √† tous les utilisateurs authentifi√©s
    const insertPolicy = `
      create policy if not exists "Allow authenticated uploads to ppt-templates"
      on storage.objects for insert
      to authenticated
      with check ( bucket_id = '${BUCKET_NAME}' );
    `;

    // Politique 3: Permettre la mise √† jour aux utilisateurs authentifi√©s
    const updatePolicy = `
      create policy if not exists "Allow authenticated updates to ppt-templates"
      on storage.objects for update
      to authenticated
      using ( bucket_id = '${BUCKET_NAME}' );
    `;

    // Politique 4: Permettre la suppression aux utilisateurs authentifi√©s
    const deletePolicy = `
      create policy if not exists "Allow authenticated delete from ppt-templates"
      on storage.objects for delete
      to authenticated
      using ( bucket_id = '${BUCKET_NAME}' );
    `;

    // Politique 5: Permettre aux utilisateurs anonymes de lister les objets (optionnel)
    const listPolicy = `
      create policy if not exists "Allow public list access to ppt-templates"
      on storage.objects for select
      to public
      using ( bucket_id = '${BUCKET_NAME}' );
    `;

    // Activer RLS sur la table storage.objects si ce n'est pas d√©j√† fait
    const enableRLS = `
      alter table if exists storage.objects enable row level security;
    `;

    console.log('‚è≥ Activation de RLS sur storage.objects...');
    const { error: rlsError } = await supabaseAdmin.rpc('sql', { query: enableRLS });
    if (rlsError) {
      console.warn('‚ö†Ô∏è Avertissement RLS:', rlsError.message);
    } else {
      console.log('‚úÖ RLS activ√© sur storage.objects');
    }

    // Appliquer chaque politique
    const policies = [
      { name: 'Lecture publique', sql: selectPolicy },
      { name: 'Upload authentifi√©', sql: insertPolicy },
      { name: 'Mise √† jour authentifi√©e', sql: updatePolicy },
      { name: 'Suppression authentifi√©e', sql: deletePolicy },
      { name: 'Liste publique', sql: listPolicy }
    ];

    for (const policy of policies) {
      console.log(`‚è≥ Cr√©ation de la politique: ${policy.name}...`);
      const { error } = await supabaseAdmin.rpc('sql', { query: policy.sql });
      
      if (error) {
        console.warn(`‚ö†Ô∏è Avertissement pour ${policy.name}:`, error.message);
        // Ne pas √©chouer compl√®tement si la politique existe d√©j√†
        if (!error.message.includes('already exists')) {
          console.error(`‚ùå Erreur critique pour ${policy.name}:`, error);
          return false;
        }
      } else {
        console.log(`‚úÖ Politique "${policy.name}" cr√©√©e avec succ√®s`);
      }
    }

    console.log('‚úÖ Configuration des politiques RLS termin√©e avec succ√®s');
    return true;

  } catch (error) {
    console.error('‚ùå Erreur lors de la configuration des politiques RLS:', error);
    return false;
  }
}

/**
 * V√©rifie que les politiques RLS sont correctement configur√©es
 * @returns {Promise<boolean>} - true si les politiques sont valides
 */
async function verifyRLSPolicies() {
  console.log('üîÑ V√©rification des politiques RLS...');

  try {
    // Tenter un test de lecture publique
    const { data, error } = await supabaseAdmin.storage.from(BUCKET_NAME).list();
    
    if (error) {
      console.error('‚ùå Test de lecture √©chou√©:', error);
      return false;
    }

    console.log('‚úÖ Les politiques RLS fonctionnent correctement');
    return true;

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification des politiques:', error);
    return false;
  }
}

module.exports = {
  setupRLSPolicies,
  verifyRLSPolicies
};
